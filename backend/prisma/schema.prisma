// QHop Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id          String   @id @default(uuid())
  phone       String   @unique
  name        String
  email       String?
  avatar      String?
  isVerified  Boolean  @default(false)
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tickets     Ticket[]
  reviews     Review[]
  sessions    UserSession[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Business Management
model Business {
  id          String   @id @default(uuid())
  name        String
  category    String
  description String?
  address     String
  phone       String
  email       String?
  website     String?
  latitude    Float?
  longitude   Float?
  rating      Float    @default(0)
  totalReviews Int     @default(0)
  isActive    Boolean  @default(true)
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owners      BusinessOwner[]
  staff       Staff[]
  services    Service[]
  queues      Queue[]
  tickets     Ticket[]
  reviews     Review[]
  analytics   BusinessAnalytics[]
  operatingHours OperatingHours[]

  @@map("businesses")
}

model BusinessOwner {
  id         String   @id @default(uuid())
  businessId String
  name       String
  email      String   @unique
  password   String
  phone      String
  role       Role     @default(OWNER)
  isActive   Boolean  @default(true)
  lastLogin  DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  sessions BusinessSession[]

  @@map("business_owners")
}

model BusinessSession {
  id        String   @id @default(uuid())
  ownerId   String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  owner BusinessOwner @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("business_sessions")
}

model Staff {
  id         String   @id @default(uuid())
  businessId String
  name       String
  email      String
  phone      String
  role       Role     @default(STAFF)
  permissions Json?
  schedule   Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("staff")
}

// Services
model Service {
  id          String   @id @default(uuid())
  businessId  String
  name        String
  description String?
  duration    Int      // in minutes
  price       Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  tickets  Ticket[]

  @@map("services")
}

// Queue Management
model Queue {
  id         String      @id @default(uuid())
  businessId String
  name       String
  maxSize    Int         @default(50)
  isActive   Boolean     @default(true)
  status     QueueStatus @default(OPEN)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  tickets  Ticket[]

  @@map("queues")
}

model Ticket {
  id           String       @id @default(uuid())
  businessId   String
  queueId      String
  userId       String
  serviceId    String?
  ticketNumber String
  position     Int
  status       TicketStatus @default(WAITING)
  estimatedTime DateTime?
  calledAt     DateTime?
  servedAt     DateTime?
  completedAt  DateTime?
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  queue    Queue    @relation(fields: [queueId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  service  Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@unique([businessId, ticketNumber])
  @@map("tickets")
}

// Reviews and Ratings
model Review {
  id         String   @id @default(uuid())
  businessId String
  userId     String
  rating     Int      // 1-5 stars
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([businessId, userId])
  @@map("reviews")
}

// Analytics
model BusinessAnalytics {
  id                   String   @id @default(uuid())
  businessId           String
  date                 DateTime @db.Date
  totalCustomers       Int      @default(0)
  avgWaitTime          Float    @default(0)
  avgServiceTime       Float    @default(0)
  peakHour             Int?     // 0-23
  customerSatisfaction Float    @default(0)
  noShowRate           Float    @default(0)
  revenue              Float    @default(0)
  hourlyData           Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, date])
  @@map("business_analytics")
}

// Operating Hours
model OperatingHours {
  id         String    @id @default(uuid())
  businessId String
  dayOfWeek  Int       // 0-6 (Sunday-Saturday)
  openTime   String?   // HH:MM format
  closeTime  String?   // HH:MM format
  isOpen     Boolean   @default(true)
  breaks     Json?     // Array of break periods
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, dayOfWeek])
  @@map("operating_hours")
}

// Notifications
model Notification {
  id        String           @id @default(uuid())
  userId    String?
  businessId String?
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  sentAt    DateTime?
  createdAt DateTime         @default(now())

  @@map("notifications")
}

// Enums
enum Role {
  OWNER
  MANAGER
  STAFF
}

enum QueueStatus {
  OPEN
  PAUSED
  CLOSED
}

enum TicketStatus {
  WAITING
  CALLED
  IN_SERVICE
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum NotificationType {
  QUEUE_UPDATE
  POSITION_CHANGE
  CALLED_TO_SERVICE
  SERVICE_REMINDER
  BUSINESS_ANNOUNCEMENT
  SYSTEM_NOTIFICATION
}
